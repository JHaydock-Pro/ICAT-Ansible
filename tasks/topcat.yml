---

- name: "{{ play_name }}Loading Pre-playbook Check"
  include: "preplay.yml"

#---

#---Downloading TopCat---

- name: "{{ play_name }}Checking if {{ topcat_zip }} exists"
  stat:
    path: "{{ download_dir }}{{ topcat_zip }}"
  register: tc_zip

- name: "{{ play_name }}Downloading {{ topcat_zip }} to '{{ download_dir }}'"
  get_url:
    url: "{{ topcat_src }}"
    dest: "{{ download_dir }}"
  when: tc_zip.stat.exists == false

#---

#---Unzipping TopCat

- name: "{{ play_name }}Checking if {{ topcat_path }} exists"
  stat:
    path: "{{ topcat_path }}"
  register: tc_dir    

- name: "{{ play_name }}Unzipping {{ topcat_zip }}"
  unarchive:
    src: "{{ download_dir }}{{ topcat_zip }}"
    dest: "{{ user_home }}/"
    remote_src: yes
  when: tc_dir.stat.exists == false

#---

#---Setup Properties File

- name: "{{ play_name }}Checking if {{ topcat_setup }} exists"
  stat:
    path: "{{ topcat_path }}/{{ topcat_setup }}"
  register: tp_setup

- name: "{{ play_name }}Copying {{ topcat_setup }}.example"
  copy:
    src: "{{ topcat_path }}/{{ topcat_setup }}.example"
    dest: "{{ topcat_path }}/{{ topcat_setup }}"
    remote_src: yes
  when:
    - tp_setup.stat.exists == false 

- name: "{{ play_name }}Configuring {{ topcat_setup }}"
  lineinfile:
    path: "{{ topcat_path }}/{{ topcat_setup }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items: "{{ topcat_cnf_list }}"
   
- name: "{{ play_name }}Adding 'mail.enable = {{ email_enable }}' to versions before 2.3.0"
  lineinfile:
    path: "{{ topcat_path }}/{{ topcat_setup }}"
    regexp: "^mail.enable"
    line: "mail.enable = {{ email_enable }}"
  when:
    - topcat_version | version_compare('2.3.0','<=')

#---

#---Properties File---

- name: "{{ play_name }}Checking if {{ topcat_prop }} exists"
  stat:
    path: "{{ topcat_path }}/{{ topcat_prop }}"
  register: tp_prop      

- name: "{{ play_name }}Creating {{ topcat_prop }}"
  copy:
    src: "{{ topcat_path }}/{{ topcat_prop }}.example"
    dest: "{{ topcat_path }}/{{ topcat_prop }}"
    remote_src: yes
  when:
    - tp_prop.stat.exists == false
  
- name: "{{ play_name }}Configuring {{ topcat_prop }}"
  lineinfile:
    path: "{{ topcat_path }}/{{ topcat_prop }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: "mail.enable",    line: "mail.enable = {{ email_enable }}"}
    - { regexp: "ids.getStatus",  line: "ids.getStatus.max = 100" }
    - { regexp: "poll.delay",     line: "poll.delay = 600" }
    - { regexp: "poll.interval",  line: "poll.interval.wait = 600" }
    - { regexp: "adminUserNames", line: "adminUserNames = {{ icat_admin_mech }}/{{ icat_admin_user }}" }

#---

#---Json Files---

- name: "{{ play_name }}Creating {{ topcat_json }}, {{ topcat_lang }} and {{ topcat_css }}"
  copy:
    src: "{{ topcat_path }}/{{ item }}.example"
    dest: "{{ topcat_path }}/{{ item }}"
    remote_src: yes
    force: no
  with_items:
    - "{{ topcat_json }}"
    - "{{ topcat_lang }}"
    - "{{ topcat_css }}"

- name: "{{ play_name }}Configuring {{ topcat_json }}"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.rep }}"
  with_items:
    - { regexp: "https://",                rep: "http://" }
    - { regexp: "8181",                    rep: "{{ icat_port }}" }
    - { regexp: "18080",                   rep: "{{ icat_port }}" }
    - { regexp: "localhost",               rep: "{{ inventory_hostname }}" }
    - { regexp: 'your facility name[^"]*', rep: "LILS" }

#---
# TODO replace with task to remove all facilities not in mysql \/
#---

- name: "{{ play_name }}Correcting errors in ISIS facilty in JSON file"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '"title": "ISIS",(?s)(.*?)"hierarchy"'
    replace: '"title": "ISIS",
\n            "idsUrl": "",
\n            "icatUrl": "",
\n            "hierarchy"'
  when:
    - topcat_version | version_compare('2.3.0','>=') == true

#---JSON AUTHENTICATORS---    

# TODO create tasks to remove any disabled authenticators

- name: "{{ play_name }}Adding Authentication types to {{ topcat_json }}"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '"authenticationTypes": \[(?s)(.*?)\]'
    replace: '"authenticationTypes": [
\n                { "title": "Simple", "plugin": "simple" },
\n                { "title": "DB",     "plugin": "db" },
\n                { "title": "LDAP",   "plugin": "ldap" },
\n                { "title": "Anon",   "plugin": "anon" }
\n            ]'    

#---

#---Install---

- name: "{{ play_name }}Copying content.example for version newer than 2.3.0"
  command: cp {{ content_path }}.example {{ content_path }} -r
  vars:
    content_path: "{{ topcat_path }}/content"
  when:
    - topcat_version | version_compare('2.3.0', '>=')


#---Running Setup---

- name: "{{ play_name }}Installing TopCat"
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ container_path }}/bin"
  shell:
    cmd: ./setup install
    chdir: "{{ topcat_path }}"
  tags:
    - install

#---

#--Quick Test--

- name: "{{ play_name }}Checking Installed TopCat Version"
  command: "curl {{ icat_url }}/topcat/version"
  register: curl_topcat

- name: "{{ play_name }}Failing If TopCat Output Incorrect"
  fail:
    msg:
      - 'TopCat has a problem.'
      - 'Expected stdout: "{"version":"{{ topcat_version }}"}"'
      - 'Actual stdout:   "{{ curl_topcat.stdout }}"'
      - 'NOTE: Only version number is check all other text and syntax are ignored.'
  when:
    - topcat_version not in curl_topcat.stdout

#---

