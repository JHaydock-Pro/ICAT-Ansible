---

- name: "{{ play_name }}Loading Pre-playbook Check"
  include: "preplay.yml"

#---

#---Checking existing facilities---

- name: "{{ play_name }}Getting ICAT session ID"
  command: "{{ pycat_login }}"
  register: icat_sess

- set_fact:
     icat_id: "{{ icat_sess.stdout | replace('\":\"','=') | replace('\"','') | replace('{','') | replace('}','') }}"

- debug: msg="{{ item }}"
  with_items:
    - "{{ icat_sess.stdout }}" 
    - "{{ icat_id }}"
  when: '"sessionId" in icat_sess.stdout'

- name: "{{ play_name }}Checking existing facilities"
  command: "{{ pycat_check }}"
  register: icat_facs

- debug: var=icat_facs.stdout

#---

#---Deleting Facility if requested---

 #--Wiping ICAT with Python script--

- name: "{{ play_name }}Wiping ICAT"
  command: "wipeicat.py --url \"{{ icat_url }}/ICATService/ICAT?wsdl\" -u {{ icat_root }} -p {{ icat_pass }} -a {{ icat_mech }}"
  when:
    - 'fac_name in icat_facs.stdout'
    - wipe_icat == true

 #--

 #--Deleting from sql script--

- name: "{{ play_name }}Creating SQL Deletion Scripts"
  template:
    src: "../templates/{{ item }}"
    dest: "{{ download_dir }}"
  with_items:
    - idgrab.sql
    - delusers.sql
  when:
    - 'fac_name in icat_facs.stdout'
    - delete_fac == true

- name: "{{ play_name }}Getting {{ fac_name }} ID"
  mysql_db:
    state: import
    target: "{{ download_dir }}idgrab.sql"
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    name: "{{ icat_name }}"
  when:
    - 'fac_name in icat_facs.stdout'
    - delete_fac == true
  register: sql_msg

- name: "{{ play_name }}Deleting facility"
  command: "{{ pycat_del_sql }}"  
  when:
    - 'fac_name in icat_facs.stdout'
    - delete_fac == true

- name: "{{ play_name }}Deleting Users"
  mysql_db:
    state: import
    target: "{{ download_dir }}delusers.sql"
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    name: "{{ icat_name }}"
  when:
    - 'fac_name in icat_facs.stdout'
    - delete_fac == true

 #--

- name: "{{ play_name }}Checking existing facilities"
  command: "{{ pycat_check }}"
  when:
    - '"sessionId=" in icat_id'
    - 'fac_name in icat_facs.stdout'
    - ( wipe_icat == true ) or ( delete_fac == true )
  register: icat_facs2    

- set_fact:
    icat_facs: "{{ icat_facs2 }}"
  when:
    - '"sessionId=" in icat_id'
    - 'fac_name in icat_facs.stdout'
    - ( wipe_icat == true ) or ( delete_fac == true )

#---

#---Install dependencies for RedHat/Debian---

- name: "{{ play_name }}Installing dependencies"
  pip:
    name: "{{ item }}"
    state: latest
  with_items:
    - suds-jurko
    - PyYAML
  become: yes
  become_user: root
  when: 'fac_name not in icat_facs.stdout'

- name: "{{ play_name }}Installing dependencies for RedHat"
  yum:
    name: "{{ item }}"
    state: latest
  with_items: "{{ pycat_packages }}"
  become: yes
  become_user: root
  become_method: sudo
  when:
    - ansible_os_family == "RedHat"
    - 'fac_name not in icat_facs.stdout'
  tags:
    - redhat

- name: "{{ play_name }}Installing dependencies for Debian"
  apt:
    name: "{{ item }}"
    state: latest
  with_items: "{{ pycat_packages }}"
  become: yes
  become_user: root
  become_method: sudo
  when:
    - ansible_os_family == "Debian"
    - 'fac_name not in icat_facs.stdout'
  tags:
    - debian

- name: "{{ play_name }}Checking Python version"
  command: python --version
  register: pyv
  when: 'fac_name not in icat_facs.stdout'

#---

#---Downloading PyCAT---

- stat:
    path: "{{ download_dir }}{{ pycat_zip }}"
  register: pi_zip

- name: "{{ play_name }}Downloading Python ICAT"
  get_url:
    url: "{{ pycat_url }}"
    dest: "{{ download_dir }}"
  when: 
    - 'fac_name not in icat_facs.stdout'
    - pi_zip.stat.exists == false

#---

#---Unzipping PyCAT

- stat:
    path: "{{ pycat_path }}"
  register: pi_dir
  become: yes
  become_user: root
  become_method: sudo

- name: "{{ play_name }}Unzipping {{ pycat_zip }} "
  unarchive:
    src: "{{ download_dir }}{{ pycat_zip }}"
    dest: "/root/"
    owner: root
    group: root
    remote_src: yes
  become: yes
  become_user: root
  become_method: sudo
  when: 
    - 'fac_name not in icat_facs.stdout'
    - pi_dir.stat.exists == false

#---

#---Patching for Python 2.6---

- name: "{{ play_name }}Patching for Python 2.6"
  patch:
    src: "{{ pycat_path }}/python2_6.patch"
    basedir: "{{ pycat_path }}/"
    remote_src: yes
    strip: 1
  become: yes
  become_user: root
  become_method: sudo
  when: 
    - 'fac_name not in icat_facs.stdout'
    - '"2.6." in pyv.stderr'

#---

#---Installing PyCAT---

- name: "{{ play_name }}Building and Installing Python ICAT"
  command: "python setup.py {{ item }}"
  args:
    chdir: "{{ pycat_path }}"
  with_items:
    - build
    - install
  become: yes
  become_user: root
  become_method: sudo
  when: 'fac_name not in icat_facs.stdout'

#---Populating Database---

- stat:
    path: "{{ download_dir }}lils.yml"
  register: pi_lils

- name: "{{ play_name }}Copying Dump file"
  copy:
    src: ../files/lils.yml
    dest: "{{ download_dir }}lils.yml"
  when: 
    - 'fac_name not in icat_facs.stdout'
    - pi_lils.stat.exists == false

- name: "{{ play_name }}Modifying dump file"
  replace:
    path: "{{ download_dir }}lils.yml"
    regexp: "simple"
    replace: "{{ icat_mech }}"
  when:
    - 'fac_name not in icat_facs.stdout'


#---TODO---create smaller file so forced timeout is not required

- name: "{{ play_name }}Running ICAT ingest"
  command: "{{ pycat_ingest }}"
  when: 
    - 'fac_name not in icat_facs.stdout'
  ignore_errors: yes
  async: 60
  poll: 5

#---
