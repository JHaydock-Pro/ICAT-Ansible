---
#main.yml file for ICATInstall

#---Getting Variables---
 # By default, all variables are in config.yml or in 'defaults/'

- name: Reading Config
  include_vars: ../config.yml
  tags:
    - always

- name: Including Variables
  include_vars: 
    dir: "{{ role_path }}/{{ item }}"
    extensions:
        - yml  
  with_items:
    - 'defaults'
    - 'vars'
  tags:
    - always  

#-------Plays-------

#---Update Package Lists---
 # This is not explicitly neccesary but some machines may require it

- name: "{{ play_name }}Updating package list for RedHat"
  yum:
    name: '*'
    state: latest
  when: 
    - ansible_os_family == 'RedHat'
    - update == true  
  vars:
    play_name: "Update : "
  tags:
    - setup
    - root
    - update
    - redhat

- name: "{{ play_name }}Updating package cache for Debian"
  apt:
    update_cache: yes
  when: 
    - ansible_os_family == "Debian"
    - update == true
  vars:
    play_name: "Update : "
  tags:
   - setup
   - root
   - update
   - debian
  
#---

#---Install java---
 # Only needed if java version < 1.8.0

- name: "{{ play_name }}Loading Java Install"
  include: java.yml
  when:
    - java == true
  vars:
    play_name: "Java : "
  tags:
    - root
    - java
  
#---

#---Install MySQL---

- name: "{{ play_name }}Loading Pexpect Install"
  include: "pexpect.yml"
  when:
    - mysql == true
  vars:
    play_name: "MySQl Pexpect : "
  tags:
    - root
    - mysql
    - python
  
- name: "{{ play_name }}Loading MySQl Install and Config"
  include: "mysql.yml"
  when:
    - mysql == true
  vars:
    play_name: "MySQL : "
  tags:
    - root
    - mysql  

#---

#---Creating non-root user
 # This can be run on existing user if it has no password, but for sake of organisation a fresh user may be best
 # Username and password are set in config.yml but user_home and download_dir are declared in 'defaults/main.yml'

- name: "{{ play_name }} Creating {{ user_name }} with password {{ user_pass }}"
  user:
    name: "{{ user_name }}"
    password: "{{ user_pass }}"
    state: present
  when:
    - createuser == true
  tags:
    - createuser

#---

# All plays from this point on will run preplay.yml before it's own tasks
 # This starts glassfish domain if it exists and is not running
 # And creates download_dir if non-existent

#---Glassfish---

- name: "{{ play_name }}Loading Glassfish install" 
  include: "glassfish.yml" 
  become: yes
  become_user: "{{ user_name }}"
  when:
    - glassfish == true
  vars:
    play_name: "Glassfish : "
  tags:
    - user
    - glassfish

#---

#---Authentication---
 # The same playbook will be run for each plugin so you may see DB tasks being skipped even if set to true, don't worry, the playbook will be run again and the relevent plugin will be run

- name: "{{ play_name }}Loading Simple Authenticaton install"
  include: "{{ item }}"
  become: yes
  become_user: "{{ user_name }}"
  with_items:
    - authn.yml
  vars:
    play_name: "Authn Simple : "
    authn_plugin: simple
  when:
    - authn == true 
    - authn_simple == true
  tags:
    - user
    - authn
    - simple

- name: "{{ play_name }}Loading DB Authenticaton install"
  include: "{{ item }}"
  become: yes
  become_user: "{{ user_name }}"
  with_items:
    - authn.yml
  vars:
    play_name: "Authn DB : "
    authn_plugin: db
  when: 
    - authn== true 
    - authn_db == true
  tags:
    - user
    - authn
    - db

- name: "{{ play_name }}Loading LDAP Authenticaton install"
  include: "{{ item }}"
  become: yes
  become_user: "{{ user_name }}"
  with_items:
    - authn.yml
  vars:
    play_name: "Authn Ldap : "
    authn_plugin: ldap 
  when: 
    - authn == true
    - authn_ldap == true
  tags:
    - user
    - authn
    - ldap

- name: "{{ play_name }}Loading Anon Authenticaton install"
  include: "{{ item }}"
  become: yes
  become_user: "{{ user_name }}"
  with_items:
    - authn.yml
  vars:
    play_name: "Authn Anon : "
    authn_plugin: anon
  when: 
    - authn == true
    - authn_anon == true
  tags:
    - user
    - authn
    - anon

#---

#---ICATServer---

- name: "{{ play_name }}Loading ICAT server install"
  include: "icatserver.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "ICAT Server : "
  when:
    - icat == true
  tags:
    - user
    - icat

#---

#---Storage Plugin---
 # Setup Script sometimes returns fatal errors (currently ignored as purpose is still achieved)

- name: "{{ play_name }}Loading Storage Plugin Install"
  include: "storage.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "IDS Storage : "
  when:
    - storage == true
  tags:
    - user
    - storage

#---

#---IDS---

- name: "{{ play_name }}Loading IDS Install"
  include: "ids.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "IDS : "
  when:
    - ids == true
  tags:
    - user
    - ids

#---

#---Test Data---
 # Ingest script currently forced to timeout after 60 secs otherwise it would run for ~17mins (replace with smaller file)

- name: "{{ play_name }}Loading Python Icat Install"
  include: "pycat.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "TestData : "
  when:
    - testdata == true
  tags:
    - user
    - testdata
    - pycat
    - lorem
  
#---

#---Topcat Interface---

- name: "{{ play_name }}Loading TopCat Install"
  include: "topcat.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "TopCat : "
  when:
    - topcat == true
  tags:
    - user
    - topcat
  
#---

#---Cleanup---
 # This is meant to reduce some clutter, most files are downloaded to the download_dir but some scripts need to be in specific directories when run. This moves them back to download_dir after running.

- name: "Cleanup : Moving all uneeded files to {{ download_dir }}"
  command: "mv -f {{ item }} {{ download_dir }}"
  become: yes
  become_user: root
  become_method: sudo
  with_items:
    - "{{ user_home }}/setup-glassfish.py"
  when: 
    - cleanup == true

#---
