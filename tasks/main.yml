---
#main.yml file for ICATInstall

#---Getting Variables---
 # By default, all variables are in config.yml or in 'defaults/'

- name: Checking OS
  debug: msg="You are running {{ ansible_os_family }} {{ ansible_distribution }} {{ ansible_distribution_version }}"
  tags:
    - always

- name: Reading Config
  include_vars: "{{ role_path }}/config.yml"
  tags:
    - always

- name: Including Variables
  include_vars: 
    dir: "{{ role_path }}/{{ item }}/"
    extensions:
        - yml  
  with_items:
    - 'defaults'
    - 'vars'
  tags:
    - always  

#---Universal Dependencies---

- name: "Installing dependecies"
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ dep_pkg }}"
  tags:
    - always

#------Playbooks------

#---Update Package Lists---
 # This is not explicitly neccesary but some machines may require it

- name: "{{ play_name }}Updating Package Lists for Yum"
  yum:
    name: '*'
    state: latest
  when:
    - update == true
    - ansible_pkg_mgr == "yum"
  vars:
    play_name: "Update : "
  tags:
    - update
    - root
    - yum

- name: "{{ play_name }}Updating Package Cache for Apt"
  apt:
    update_cache: yes
  when:
    - update == true
    - ansible_pkg_mgr == "apt"
  vars:
    play_name: "Update : "
  tags:
    - update
    - root
    - apt

#---

#---Install java---
 # Only needed if java version < 1.8.0

- name: "{{ play_name }}Loading Java Install"
  include: "dep_java.yml"
  when:
    - java == true
  vars:
    play_name: "Java : "
  tags:
    - root
    - java
  
#---

#---Install MySQL---

- name: "{{ play_name }}Loading MySQl Install and Config"
  include: "dep_mysql.yml"
  when:
    - mysql == true
  vars:
    play_name: "MySQL : "
  tags:
    - root
    - mysql  

#---

#---Creating non-root user
 # This can be run on existing user if it has no password, but for sake of organisation a fresh user may be best
 # Username and password are set in config.yml but user_home and download_dir are declared in 'defaults/main.yml'

- name: "{{ play_name }} Creating {{ user_name }} with password {{ user_pass }}"
  user:
    name: "{{ user_name }}"
    password: "{{ user_pass }}"
    state: present
  when:
    - createuser == true
  tags:
    - createuser

#---


#---Container---

- name: "{{ play_name }}Setting Variables for Glassfish"
  set_fact:
    container_src: "{{ glassfish_src }}"
    container_zip: "{{ glassfish_zip }}"
    container_path: "{{ glassfish_path }}"
    container_version: "{{ glassfish_version }}"
  when:
    - container_name == "glassfish"
  tags:
    - always

- name: "{{ play_name }}Setting Variables for Payara"
  set_fact:
    container_src: "{{ payara_src }}"
    container_zip: "{{ payara_zip }}"
    container_path: "{{ payara_path }}"
    container_version: "{{ payara_version }}"
  when:
    - container_name == "payara"
  tags:
    - always

- name: "{{ play_name }}Loading {{ container_name | title }} install" 
  include: "setup_container.yml" 
  become: yes
  become_user: "{{ user_name }}"
  when:
    - container == true
  vars:
    play_name: "{{ container_name | title }} ({{ container_version }}) : "
  tags:
    - user
    - container

#---

#---Authentication---
 # The same playbook will be run for each plugin so you may see DB tasks being skipped even if set to true
 # don't worry, the playbook will be run again and the relevent plugin will be run.
 # For Example: If all four plugins are enabled the playbook will run four times, once for each plugin

- name: "{{ play_name }}Loading Simple Authenticaton install"
  include: "setup_authn.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "Authn Simple ({{ simple_version }}) : "
    authn_plugin: simple
  when:
    - authn == true 
    - authn_simple == true
  tags:
    - user
    - authn
    - simple

- name: "{{ play_name }}Loading DB Authenticaton install"
  include: "setup_authn.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "Authn DB ({{ db_version }}) : "
    authn_plugin: db
  when: 
    - authn == true 
    - authn_db == true
  tags:
    - user
    - authn
    - db

- name: "{{ play_name }}Loading LDAP Authenticaton install"
  include: "setup_authn.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "Authn Ldap ({{ ldap_version }}) : "
    authn_plugin: ldap 
  when: 
    - authn == true
    - authn_ldap == true
  tags:
    - user
    - authn
    - ldap

- name: "{{ play_name }}Loading Anon Authenticaton install"
  include: "setup_authn.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "Authn Anon ({{ anon_version }}): "
    authn_plugin: anon
  when: 
    - authn == true
    - authn_anon == true
  tags:
    - user
    - authn
    - anon

#---

#---Lucene---

- name: "{{ play_name }}Loading Lucene Install"
  include: "setup_icat_lucene.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "ICAT Lucene ({{ icat_lucene_version}}) : "
  when:
    - icat_lucene == true
  tags:
    - user
    - lucene


#---ICATServer---

- name: "{{ play_name }}Loading ICAT server install"
  include: "setup_icat_server.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "ICAT Server ({{ icat_server_version }}) : "
  when:
    - icat_server == true
  tags:
    - user
    - icat

#---

#---Storage Plugin---
 # Setup Script sometimes returns fatal errors (currently ignored as purpose is still achieved)

- name: "{{ play_name }}Loading Storage Plugin Install"
  include: "setup_ids_storage.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "IDS Storage ({{ ids_storage_version }}) : "
  when:
    - ids_storage == true
  tags:
    - user
    - storage

#---

#---IDS---

- name: "{{ play_name }}Loading IDS Install"
  include: "setup_ids_server.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "IDS ({{ ids_server_version }}) : "
  when:
    - ids_server == true
  tags:
    - user
    - ids

#---

#---Topcat Interface---

- name: "{{ play_name }}Loading TopCat Install"
  include: "setup_topcat.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "TopCat ({{ topcat_version }}): "
  when:
    - topcat == true
  tags:
    - user
    - topcat

#---

#---Test Data---
 # Ingest script currently forced to timeout after 60 secs otherwise it would run for ~17mins (replace with smaller file)

- name: "{{ play_name }}Loading Python Icat Install"
  include: "test_ingest_pycat.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "TestData (Python ICAT {{ pycat_version }}): "
  when:
    - testdata == true
  tags:
    - user
    - testdata
    - pycat
    - lorum
  
#---

#---Cleanup---
 # This is meant to reduce some clutter, most files are downloaded to the download_dir but some scripts need to be in specific directories when run. This moves them back to download_dir after running.
 # Any files you wish to move to the download_dir should be added to the with_items list below

- name: "Cleanup : Moving all uneeded files to {{ download_dir }}"
  command: "mv -f {{ item }} {{ download_dir }}"
  become: yes
  become_user: root
  become_method: sudo
  with_items:
    - "{{ user_home }}/setup-glassfish.py"
  when: 
    - cleanup == true
  tags:
    - cleanup

#---

#---Selenium---
 # This step is only needed for travis/selenium testing
 # It does NOT run the selenium test, or install any browsers
 # It currently just creates a directory, downloads webdrivers, copies the script and templates the args file

- name: "{{ play_name }}Loading Selenium Setup"
  include: "test_selenium.yml"
  become: yes
  become_user: "{{ user_name }}"
  vars:
    play_name: "Selenium : "
  when:
    - selenium == true
  tags:
    - user
    - selenium

#---

#---End---

- name: "Install Complete"
  debug:
    msg:
      - "Install Complete"
      - "Go to '{{ icat_url }}' to test."
  tags:
    - end
