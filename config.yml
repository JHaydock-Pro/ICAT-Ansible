---

#---VARIABLES---
#  vars:
  # More variables can be found in /defaults and /vars within the role

 #---CONFIGURATION---

   #---Playbooks---
    # Choose what you want installed
    # Most of these are dependent on each other so be careful when changing

#   Playbook			|Description								| Tasks (in /tasks/)		|Variables (In config.yml and /defaults/)		|Users

    update: true		# Updates package lists							main.yml			config.yml						root
    java: true			# Installs java and some dependencies					java.yml			config.yml, java.yml					root	
    mysql: true	        	# Installs and configures Mysql						pexpect.yml, mysql.yml		config.yml, pexpect.yml, mysql.yml			root, mysql-root				
    createuser: true		# Creates non-root user, almost all tasks after this don't use root	main.yml			config.yml						root		
    container: true		# Install chosen container, see below					glassfish.yml, payara.yml	config.yml, glassfish.yml, payara.yml			non-root
    authn: true			# Installs and configures authentication plugin(s) -See Below  		authn.yml			config.yml, authn.yml, glassfish.yml			non-root, icat-root
    icat: true			# Installs and configures ICAT Server					icat.yml			config.yml, icat.yml, glassfish.yml			non-root
    storage: true		# Installs and configures IDS Storage Plugin				storage.yml			config.yml, storage.yml, glassfish.yml			non-root
    ids: true			# Installs and configures ICAT Data Service				ids.yml				config.yml, ids.yml, glassfish.yml			non-root
    testdata: true		# Installs Python-ICAT and ingests data into database 			pycat.yml			config.yml, pycat.yml					root, non-root, mysql-root, icat-root
    topcat: true		# Installs and configures TopCat interface				topcat.yml			config.myl, topcat.yml					non-root, icat-root
    cleanup: false      	# Moves used files to download_dir after finish to reduce clutter	main.yml			config.yml						root, non-root

# I may have missed some variables files, but the prefix of the variable should indicate where it's declared
# i.e. pycat_zip is declared in pycat.yml

   #---Version Numbers---
    # These must not be left blank otherwise a syntax error will be returned. Even if the software isn't used.



   #---Container---
    # One and only one of these must be enabled

    container_name: glassfish	# Glassfish Container		(version 4.0)
#    container_name: payara	# Payara Container		(version ?)

   #---Authentication Plugins---(authn.yml)
    # At least one of these must be installed but any combination of multiple should work
    # Anon authenticator should work on it's own but it is recomended that you use one of the other plugins for the database root user     

    authn_simple: true		# Simple Authenticator 	
    authn_db: true		# DB Authenticator	
    authn_ldap: false           # LDAP Authenticator            
    authn_anon: false 		# Anonymous Authenticator 
   
   #---ICAT Configure---
    # inventory_hostname = name used in hosts above
    # It's similar to using 'localhost' except topcat interface can used by browsers on remote machines
 
    icat_url: http://{{ inventory_hostname }}:{{ icat_port }} 	# URL of the database
    icat_port: 8080             				# Port for the database access
    icat_name: icat						# Name of the database

  
  #---Reponse to duplicate facilities for icatingest.py---(pycat.yml)
   # The icatingest.py script for TestData cannot overwrite existing facilities and users
   # If you wish to remove existing facilties use ONE of the methods below:
    # 'wipe_icat: true' 	Will remove all populating data from the database (tables will remain but be empty). Some metadata and PASSWD table will be untouched
    # 'delete_fac: true'	Will grab the ID of the facility and delete all data with that id, it will also remove all users generated by the lils.yml ingest
    # Leaving all false 	Will skip icatingest.py if it finds an already existing facilty with the {{ fac_name }} name.

    wipe_icat: false		# WARNING! This will remove all facilities
    delete_fac: true

   
  #---Creating files for TestData---(pycat.yml)
   # icatingest.py does actually create any files, it just generates the meta data used by the database
   # for proper testing some files must be created
   # Selecting individual files is complicated in this setup so instead the following methods will create every file matching certain conditions
   # Note these will create every file they find, even if their facility has been deleted with 'delete_fac' (use wipe_icat to remove all entries)

    create_file: true		# Creates everyfile with specific name in DATAFILE table
    datafiles: 			# Names of Files to be created
      - Datafile 1		# You should be able to add multiple
#      - Datafile 2		 # example of how to add multiple filenames

    create_all: false		# WARNING! This will create everyfile mentioned in DATAFILE, including those from other facilities and those without facilities. A single icat ingest creates nearly 2000 files

 #---END OF CONFIGURATION---

 #---USERS---
  # Passwords can be clear text or hash encrypted with '$'
   # Clear text passwords must not start with '$'
 
   #---Non-Root System User---
    # The user that will run all non-root tasks

    user_name: user1
    user_pass: pass

    user_home: "/home/{{ user_name }}"		 	# The directory where most of the things will be installed, this has not been tested outside of default home directory.
    download_dir: "{{ user_home }}/icatdownloads/"	# Where download files will go before being unzipped or moved to relevent locations, this has not been tested outside of default.


   #---MySQL User---
    # All MySQL commands will be run as root user if needed

    mysql_root_pass: pw		# If Mysql is already installed and configured, set this to current root pass

    mysql_user: icat
    mysql_pass: icat


   #---Database Admin User---
    # This will be the user that acts as root for the interface, must have mechanism from enabled plugin
    # eg. 'simple/root' will be a user called root when using simple authenticator
    # This should be one of the users set below or on ldap sever
    # This will also be the user that has permissions to view the testdata generated by pycat.yml

    icat_mech: simple		# Plugin used for admin account. Ideally 'simple' or 'db'.Must be enabled above!
    icat_root: root		# Name of admin account. Must be included below!
    icat_pass: pass		# Password of admin. Must be included below!

   #---Simple Authn Users---
    # These users will be added to authn_simple.properties
    # In theory this should handle as many users as you wish so long as you use the format below    
   
    authn_simple_users:
      - user: root
        pass: pass
 
      - user: user1
        pass: pass1
     
    #-end of simple users-


   #---DB Authn Users---
    # These users will be added to a PASSWD table within the database

    authn_db_users: 
      - user: root
        pass: password
  
      - user: notroot
        pass: password
      
      - user: piOne
        pass: piOne

      - user: piTwo
        pass: piTwo

      - user: guest
        pass: guess

    #-end of db users-

   #---Ldap Users---
    # I don't actually know how ldap works yet but I think these are important
    
    ldap_provider: ldap://logon05.fed.cclrc.ac.uk  	# provider_url =
    ldap_principal: \%\@fed.cclrc.ac.uk			# security_principal =

    #-end of ldap users---

 #---END OF USERS---

#---END OF VARIABLES---

# The authn.yml playbook will be run multiple times for each plugin set to true.
 # Inside this playbook are several tasks that will fail conditionals if a plugin is false for each run
 # This means that even if you have simple and db set to true, it will report skipping db tasks on the first run
 # then automatically run again reporting skips on simple tasks.
 # The task name will tell you which plugin is currently being handled.

# Some tasks have 'ignore_errors: yes' on them
 # This means they will move on to the next task even if a fatal error is returned
 # current tasks with ignore errors:
 # MySQL root pass reset 	(mysql.yml)		Will return errors on first run since password won't be mysql_root_pass
 # Storage setup script 	(storage.yml)		Final line of script fails but job is still accomplished
 # icatingest.py		(pycat.yml)		Takes too long, forced timeout still produces data
 # I shall attempt to find a better workaround for these in future

# See README.md for more information
